Изначально мы пишем некий код, который понятен нам, но не понятен машине. Машина понимает только машинный код, и для того, чтобы наш код превратился в машинный код, используется транслятор, который бывает двух видов:
1. Компилятор – передают сразу весь написанный код в машинный, поэтому машинный код в результате содержит в себе всю специфику конкретного аппаратного обеспечения. Соответственно, схема такая: исходный код – компилятор – исполняемый файл – результат. Программе не нужен исходный код для работы.
2. Интерпретатор – передаёт одну инструкцию, выполняет её, и только затем переходит к следующей. Соответственно, схема такая: исходный код – интерпретатор (исполняемый файл) – результат. Так как интерпретатор не создаёт исполняемый файл, то нам всегда нужен исходный код и интерпретатор для выполнения программы. Интерпретатор всегда работает немного дольше, чем компилятор; но при этом интерпретатор универсальнее, он позволяет работать программе в разных операционных системах
Java преобразовывает код в некий промежуточный код (функций компилятора), а затем выполняет его (дополнительно преобразует) на конкретном устройстве (функций интерпретатора), поэтому на каждом типе устройств этот код может интерпретироваться несколько по разному. Компилятор Java называется Javac; интерпретатор Java – JVM. Javac превращает код в байт-код; JVM исполняет этот самый байт-код.
Байт-код - набор инструкций, выполняемых Java-машиной. Каждый код операции равен одному байту. Инструкции можно разделить на несколько групп:
Загрузка и сохранение;
Арифметические и логические операции;
Преобразование типов;
Создание и преобразование объекта;
Управление стеком;
Операторы переходов;
Вызовы методов и возврат.
Также возможно обратное преобразование из байт-кода в код Java – декомпиляция. Популярные декомпиляторы – Mocha, Java Decompiler, DJ Java Decompiler.
Материалы любезно предоставлены http://progwards.ru/