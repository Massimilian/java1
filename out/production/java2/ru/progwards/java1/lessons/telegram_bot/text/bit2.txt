Самый первый (левый) бит числа в двоичном представлении в Java отвечает за знак числа (положительное оно или отрицательное). Если первый бит = 0, то число положительное, если первый бит = 1, то число отрицательное.
Также есть ряд операций, которые также являются сокращёнными вариантами бинарных операций:
&= - «и» (AND) с присваиванием; x = x&y   x &= y
|= - «или» (OR) с присваиванием; x = x|y   x |= y
^= - побитовое отрицание XOR с присваиванием; x = x^y  x ^= y
>>= - сдвиг вправо с присваиванием; x = x >> y  x >>= y
>>>= - сдвиг вправо с заполнением нолями с присваиванием; x = x >>> y  x >>>= y
<<= - сдвиг влево с присваиванием. x = x <<= y  x <<= y

Бинарные операции активно используются, например, в шифровании (XOR используется для зашифровки при помощи числа x); дешифровка осуществляется с помощью того же числа.
Другой вариант использования – предположим, что мы получаем из GPS датчика информацию о скорости машины в виде byte (например, 10000111, что в переводе на двоичную систему будет 135). Но, так как в Java первый бит отвечает за знак, на экран будет введено -121. Для того, чтобы вывести грамотное значение, необходимо взять число 255 (11111111) и побитово сравнить (&) скорость и это число, присвоив результат в более крупное значение int. Тогда все знаки, кроме правых 8, будут превращены в 0 (1 из скорости и 0 из числа корректора); первый знак последнего байта сохранится (1 из скорости и 1 из числа корректора дадут 1), все ноли останутся нолями (0 из скорости и 1 из корректора дадут 0).
Материалы любезно предоставлены http://progwards.ru/