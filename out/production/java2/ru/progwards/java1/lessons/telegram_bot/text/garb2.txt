...
Когда объект уничтожается в памяти начинают возникать дырки (это явление называется фрагментацией). При большом количестве «дырок» становится проблемным размещать новые объекты.
При попытке разместить более маленький объект в куче необходимо будет потратить некоторое время на поиск места для хранения этого объекта; при попытке разместить более крупный объект мы получим OutOfMemory даже при объективном наличии свободной памяти.
Очистка стека осуществляется без каких-либо проблем.
Очистка кучи предполагает несколько действий:
установление факта ненужности объекта;
удаление объекта => фрагментация памяти.
Добавление нового объекта в кучу осуществляется также через несколько действий:
поиск подходящего места в фрагментированной памяти.
Если объект слишком большой и нет такого пространства, которое могло бы вместить объект (даже при реальном большом количестве свободной памяти) – мы получаем OutOfMemory.
Как раз этими проблемами и занимается Garbage Collector:
Очищает кучу от неиспользуемых элементов, которые не имеют на себя ссылок;
Поддерживает кучу в удобном для добавления новых объектов состоянии (ликвидирует фрагментацию);
Обеспечивает максимальное быстродействие этих операций.
Используемыми элементами считаются те элементы, которые имеют ссылки из стека (параметры методов, локальные переменные) и статические переменные. Их Garbage Collector не трогает.
В теории сборки мусора различают два поколения – молодое (недавно появившиеся объекты и выжившие (Survivor) после первой сборки мусора) и старое (выжившие после нескольких сборок мусора). Жизнь большинства объектов молодого поколения коротка.
Необходимо также внести некоторые понятия по работе со сборщиком мусора
-Xms: определяет размер начальной выделенной памяти под объекты;
-Xmx: определяет максимальный размер памяти, выше которого приложение не задействует.
На данный момент существуют семь сборщиков мусора:
1.Serial
2.Parallel
3.CMS (не рекомендован в JDK 9)
4.G1
5.Epsilon (с JDK 11)
6.Z (с JDK 11)
7.Shenandoah (с JDK 12).
При выборе рассматриваются два параметра – остановки STW (чем меньше, тем лучше) и производительность (чем больше, тем лучше) - дополнительный параметр: ресурсы – объём памяти и процессора (чем меньше, тем лучше).
Материалы любезно предоставлены http://progwards.ru/