Практически вся Java работает автоматически во всём, что касается памяти.
Для начала необходимо познакомиться с классом RunTime. Как уже упоминалось ранее, этот класс работает в том числе с памятью runtime приложения. Основные методы:
gc() – явный вызов работы сборщика мусора (полная сборка мусора)
long freeMemory  - вызывает количество свободной памяти в куче, доступной JVM.
long totalMemory() – вызов информации о количестве памяти (всего) в куче.
maxMemory() – вызов информации о максимально возможном объёме памяти в куче.
Для теста попробуем создать высоконагруженную программу, которая будет анализировать своё состояние и искусственно вызывать GC:

import java.util.ArrayList;
import java.util.Date;

public class Main {
    static void printcurr(String info) {
        System.out.println(String.format("%1$tI:%1$tM:%1$tS.%1$tN", new Date())); // выведем текущее время
        System.out.println(info);
        Runtime runtime = Runtime.getRuntime(); // получаем текущий Runtime
        System.out.println("Всего памяти: " + runtime.totalMemory());
        System.out.println("Максимальный размер памяти в куче: " + runtime.maxMemory());
        System.out.println("Размер свободной памяти: " + runtime.freeMemory());
    }

    public static void main(String[] args) {
        printcurr("Памяти на старте");
        ArrayList<Integer> arr = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 10500000; j++) {
                arr.add(j);
            }
            System.out.println();
            printcurr("Состояние памяти после создания объектов. Попытка №" + (i + 1));
            arr.clear(); // очищаем лист от значений
            System.gc(); // искусственно вызывает Garbage Collector
            printcurr("Состояние памяти после сборки мусора");
        }
    }
}

Вывод на консоль:
07:50:05.510000000 | Памяти на старте | Всего памяти: 117440512 | Максимальный размер памяти в куче: 1862270976 | Размер свободной памяти: 113810360

07:50:06.187000000 | Состояние памяти после создания объектов. Попытка №0 | Всего памяти: 384827392 | Максимальный размер памяти в куче: 1862270976 | Размер свободной памяти: 55574528 | 07:50:06.318000000 | Состояние памяти после сборки мусора | Всего памяти: 199229440 | Максимальный размер памяти в куче: 1862270976 | Размер свободной памяти: 141236960

07:50:06.565000000 | Состояние памяти после создания объектов. Попытка №1 | Всего памяти: 597688320 | Максимальный размер памяти в куче: 1862270976 | Размер свободной памяти: 366156512 | 07:50:06.603000000 | Состояние памяти после сборки мусора | Всего памяти: 203423744 | Максимальный размер памяти в куче: 1862270976 | Размер свободной памяти: 145431504

07:50:06.866000000 | Состояние памяти после создания объектов. Попытка №2 | Всего памяти: 610271232 | Максимальный размер памяти в куче: 1862270976 | Размер свободной памяти: 379786192 | 07:50:06.904000000 | Состояние памяти после сборки мусора | Всего памяти: 203423744 | Максимальный размер памяти в куче: 1862270976 | Размер свободной памяти: 145431312

Process finished with exit code 0

Как можно увидеть, размер свободной памяти каждый раз увеличивается при вызове GC.
...
Для продолжения наберите "lin2"

Материалы любезно предоставлены http://progwards.ru/