	Это интерфейс, который наследуется от Collection и несколько расширяет его возможности.
•	boolean addAll(int index, Collection<? extends E> c) – добавляет элементы коллекции c, начиная с индекса index;
•	void sort(Comparator <? super E> c) – сортирует элементы согласно компаратору c;
•	E get(int index) – возврат элемента коллекции под номером index;
•	E set(int index, E element) – установка элемента E в ячейку под номером index (с заменой предыдущего значения);
•	void add(int index, E element) – добавление элемента E в ячейку под номером index и со сдвигом остальных элементов на 1 позицию;
•	E remove(int index) – удаляет элемент под номером index и уменьшает size на 1;
•	int indexOf(Object o) – возвращает первый индекс элемента o;
•	int lastIndexOf(Object o) – возвращает последний индекс элемента o;
•	List<E> sublist(int fromIndex, int toIndex) – возвращает подсписок, который состоит из элементов между fromIndex (включительно) и toIndex (исключительно).

ArrayList - одна из реализаций интерфейса List. Это динамический массив. Если в него добавлять примитивы, то они будут автоматически упаковаться в классы-обёртки. Рекомендуется при объявлении ограничивать тип данных конкретного объекта ArrayList. Предпочтительный вариант объявления:
List<String> list = new ArrayList<>();

Этот способ позволяет полностью использовать полиморфизм. Особые методы ArrayList:
•	list.sort() – сортирует у экземпляра класса ArrayList по имени list все ячейки по возрастающей; если объекты comparable, то в аргументы ничего передавать не надо, если нет – необходимо передать Comparator (этот метод – аналог Collections.sort(list));
•	void insureCapacity(int minCapacity) – изменяется размер массива до размера minCapacity;
•	void trimToSize() – сжимает массив до реального количества элементов в списке (фактически создаёт новый массив).
ArrayList по сути является массивом, в котором лежат ссылки на объекты. При создании ArrayList создаётся массив размером в 10 элементов и заполняется null-ами. При добавлении элементов соответствующий null подменяется на собственно элемент. При полном заполнении всех ячеек массив увеличивается на 50% (т.е. 10 -> 15, 15 -> 22 и т.д.) – точнее, создаётся массив, больший по размеру на 50%, и в него копируются все элементы старого массива, а остальные заполняются null-ами.
При добавлении элементов в середину ArrayList остальные элементы сдвигаются на более старшие позиции (но делают это блочно, поэтому – быстро). При удалении принцип работы такой же. 
Общие принципы скорости работы:
•	Добавление/удаление в конце ArrayList происходит быстро.
•	Добавление/удаление в начале ArrayList происходит медленно.
•	Обращение к элементу по индексу происходит быстро.
Конструкторы:
•	ArrayList() – без параметров;
•	ArrayList(int inicialCapacity) – с изначальным указанием размера массива (при достижении максимума он также будет увеличиваться)
•	ArrayList(Collection<? extends E> c) – конструктор с добавлением всех элементов коллекции c.

...
Для продолжения наберите "lis2"

Материалы любезно предоставлены http://progwards.ru/