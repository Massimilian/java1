Страничные массивы - это классы, которые включают в себя массив массивов определённой длины. Как только мы заполняем массив, мы переходим к следующему и начинаем заполнять его. Такой функционал помогает нам избежать времязатратной операции по перезаписи массива (которая осуществлялась на каждом шагу в динамическом массиве и регулярно осуществлялась в динамическом массиве с блочным инкрементом). Теперь, при перезаполнении объекта данными, мы будем не увеличивать размер массива и перезаписывать его же, а будем создавать новый внутренний массив. Пример создания такого массива (мы будем создавать массив с блочным инкрементом):

public class PArray<T> {
    Array<T[]> array; // создаём массив массивов
    int size; // номер текущего элемента, куда мы будем записывать значение
    int blockSize; // максимальный размер массивов, из которых сложен головной массив
    int pages; // количество вложенных массивов


    public PArray(int blockSize) {
        this.array = new Array<T[]>(blockSize, blockSize); // создаём массив фиксированной длины
        this.blockSize = blockSize;
        this.addPage(); // добавляем вложенный массив
    }

    public void add(T t) {
        if (blockSize == size) { // если вложенный массив уже заполнен
            this.addPage(); // тогда добавляем новый массив
        }
        T[] page = array.get(pages - 1); // берём последний массив
        page[size] = t; // добавляем значение внутрь последнего массива
        size++; // сейчас size у нас меньше, чем длина заполненной части последнего вложенного массива, на один. Исправляем.

    }

    private void addPage() {
        array.add((T[]) new Object[blockSize]); // добавляем новый массив размера blocksize
        pages++; // увеличиваем количество вложенных массивов на один
        size = 0; // обнуляем счётчик элементов вложенного массива, так как пока он пустой
    }

    public T get(int num) {
        int one = num / blockSize; // вычисляем массив
        int two = num % blockSize; // вычисляем положение внутри массива
        return array.get(one)[two]; // по полученому адресу вытаскиваем значение
    }
}

Материалы любезно предоставлены http://progwards.ru/