Начнём с простейшего выражения – вывода на экран по очереди всех данных листа:
List<Integer> list = List.of(1, 2, 3, 4, 5);
for (int element : list) {
    System.out.println(element);
}

Тоже самое можно записать через так называемое лямбда-выражение:
List<Integer> list = List.of(1, 2, 3, 4, 5);
list.forEach(element -> System.out.println(element));

Код стал короче и нагляднее. Метод foreach() принимает на обработку лямбда-выражение, которое состоит из двух частей – элемент и собственно работа с элементом.
Если в первый раз (вариант перебора) мы вытаскивали каждый раз значение из list (оперируя данными внутри цикла и выводя текущий элемент), то во второй раз мы сразу обращаемся к списку (набору данных) и туда передаём поведение (функцию). Таким образом мы подходим к функциональному стилю программирования.
Традиционное программирование: есть функция, в которую мы передаём данные, а функция их обрабатывает. Т.Е. мы манипулируем данными.
Функциональное программирование: есть данные, над которыми работают функции, которые мы передаём как параметры. Т.Е. мы манипулируем функциями. И лямбда выражение является компактным способом передать поведение из одного места программы в другое.
Возьмём пример – некий TreeSet, который должен уметь сортировать данные по модулю. Эту задачу можно решить за счёт анонимного класса:
TreeSet<Integer> set = new TreeSet<>(new Comparator<Integer>() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return Integer.compare(Math.abs(o1), Math.abs(o2));
    }
});
set.addAll(List.of(-1, 3, -2, 5, -4, 2, 3, 4, -2, 4, 1, -3, 2));
System.out.println(set); // вернёт [-1, -2, 3, -4, 5]

Теперь решение той же задачи – при помощи лямбда-выражения:
TreeSet<Integer> set = new TreeSet<>((o1, o2) -> Integer.compare(Math.abs(o1), Math.abs(o2)));
set.addAll(List.of(-1, 3, -2, 5, -4, 2, 3, 4, -2, 4, 1, -3, 2));
System.out.println(set); // вернёт [-1, -2, 3, -4, 5]

Компаратор будет автоматически подставлять необходимые типы.
Лямбда-выражение строится по некоторым особенным правилам:
Названия у лямбда-выражения нет. Оно сразу прописывает переменные / переменную.
Тип данных внутрь переменных подставляется автоматически, либо мы их прописываем сами, без названия типов – только имена. Указывать тип входящих параметров не надо – компилятор берёт их из контекста.
После объявления переменных / переменной, которые мы должны передать внутрь лямбда-выражения, идёт оператор «стрелочка» ->.
После стрелочки мы прописываем все те действия, которые надо совершить со входящими переменными или переменной.

Синтаксис лямбда-выражений:
λ-выражение = «параметры λ-выражения -> тело λ-выражения»;
Параметры λ-выражения = «()» – параметров нет; «параметр» - один параметр (может быть в скобках, может - нет); «(параметр1, параметр2)» - два параметра.
Тело λ-выражения = «оператор» – стандартный оператор (может быть в скобках, может – нет; не имеет оператора return); «оператор1; оператор2;… операторN» - несколько операторов исполнения (при необходимости используем оператор return).
...
Для продолжения наберите "lam2"
Материалы любезно предоставлены http://progwards.ru/