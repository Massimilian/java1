Это число с плавающей точкой. Этот тип данных реализован аппаратным способом (не программным), поэтому весьма быстро работает. Кроме того, точность вычисления операций с double зависит от конкретного процессора (т.е. на разных процессорах может быть разный результат). Условия хранения – 52 бита отдаётся на мантиссу, 11 – на порядок, 1 – на знак. Мантисса – это сама целая часть числа, как она есть. Порядок – это степень 10, на которую надо умножить/разделить искомое число. Примеры: число 2345 = |мантисса 2345| + |порядок 0|; число 2000 = |мантисса 2| + |порядок 3|; число 0.09 = |мантисса 9| + |порядок -2|.
 
Представленные выше числа можно записать так в E-нотации: 2345E0, 2E10, 3E-10. Однако, использование double даёт некоторые нюансы:
double d1 = 1E-100; // 1 * 10 в минус сотой степени
double d2 = 1E100; // 1 * 10 в сотой степени
System.out.println(d1 + d2); // выведет 1.0E100. 
Как мы видим, порядок второго числа теряется (при сохранении мантиссы). Происходит это, потому что фактически Java складывает эти числа "в столбик", соответственно, на мантиссу просто не остаётся места. Поэтому ту часть, которая не уместилась, double просто отрезает и отбрасывает.

Итого – при сложении очень больших и очень маленьких чисел результат будет неточный – будет отброшена «маленькая часть». Если нам нужна точность – реализация должна происходить через BigInteger и BigDecimal, они вычисляют всё точно, но относительно медленно.
Как уже упоминалось ранее, точность выполнения программы с double напрямую зависит от процессора. Можно вычислить точность данного процессора, запустив на нём такую программу (которая будет выискивать минимально возможное значение double путём постоянного деления на 2):
double d = 1;
double precition = 0;
while(d != 0) {
    precition = d;
    d /= 2;
}
System.out.println(precition); // выведет точность (в случае запуска на конкретной машине вывело  4.9E-324)

Для повышения точности вычислений необходимо в начале проводить операции с небольшими числами, и только потом с крупными:
double d = 1.E100;
double pi = Math.PI;
System.out.println(3.0/4.0*pi*d*d*d); // выведет 2.356194490192345E300, и это более точный результат
System.out.println(d*d*d*pi*3.0/4.0); // выведет 2.3561944901923447E300, и это менее точный результат.

Из-за неточности работы double иногда могут оказываться неточности в результатах работы программы.
double d = 5.1234;
System.out.println(d%1 == 0.1234); // сравниваем полученную математическим способом найденную дробную часть числа d с интуитивно найденной частью - и получаем, что они неравны (false). Причина – в хвосте после математических вычислений остаётся небольшое количество «мусора».

Поправим данную программу, улучшив восприятие точности:
double precition = 0.00000001; // вводим понятие точности
double d = 5.1234;
System.out.println(d%1 == 0.1234); // сравниваем полученную математическим способом найденную дробную часть числа d с интуитивно найденной частью - и получаем, что они неравны (false).
System.out.println(Math.abs(d%1 - 0.1234) < precition); // делаем то же самое с поправкой на точность - и получаем true

Double хорош для научных изысков (поиск синуса, косинуса и т.д.), но нехорош для абсолютно точных вычислений (например, для подсчёта денег).
Если нам нужно определённое количество знаков после точки – можно воспользоваться рядом преобразований, чтобы потом привести число к необходимому количеству знаков.
double d = 3.1415; // задача - сократить это число до двух символов после точки
double cort = (double)((int)(d * 100)) / 100; // при помощи ряда преобразований получаем результат (3.14)

Материалы любезно предоставлены http://progwards.ru/
