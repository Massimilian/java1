Анонимным классом является внутренний класс без имени, экземпляр которого невозможно создать. Поэтому создание и использование анонимного класса происходит в одной строчке.
Анонимный класс можно создать путём наследования уже существующего класса:

public class Test {
    public static class Book { // класс, из которого мы будем наследоваться для создания анонимного класса
        String name;
        public void write() {
            System.out.println(name);
        }
    }

    public static void main(String[] args) {
        new Book() { // анонимный класс, наследованный от Book
            @Override
            public void write() {
                super.write();
                System.out.println("Anonimous class");
            }
        };
    }
}

Можно – путём имплементации интерфейса (в данном случае имплементируем интерфейс Runnable):

public class Test {
    public static void main(String[] args) {
        new Runnable() { // создаём анонимную имплементацию Runnable
            @Override
            public void run() {
                System.out.println("Let's go!");
            }
        }.run(); // тут же её запускаем
    }
}

Создавая экземпляр анонимного класса, мы можем присвоить его в переменную.
public class Test {
    public static void main(String[] args) {
        Runnable runner = new Runnable() { // создаём экземпляр анонимного класса и присваиваем его в переменную run
            @Override
            public void run() {
                System.out.println("Some work");
            }
        };
        runner.run(); // теперь можно запустить тот метод, который мы только что определили
    }
}

Анонимное объявление класса является выражением – поэтому в конце мы ставим точку с запятой.
Внимание! Синтаксис Java не позволяет имплементировать несколько интерфейсов внутрь анонимного класса. Анонимный класс не может быть абстрактным. Не может иметь явно определённых конструкторов. Из анонимных экземпляров класса мы можем получить доступ к локальным переменным и членам класса, из которого создаётся анонимный класс (анонимный класс может получить доступ ко всем переменным своего окружающего класса). Статические поля могут быть только final.
Мы обычно используем анонимные классы, когда нам приходится изменять на лету реализацию методов некоторых классов (например, при устранении багов). В этом случае мы можем избежать добавления новых *.java-файлы в проект для определения классов «верхнего» уровня. Это особенно верно, если этот класс верхнего уровня будет использоваться только один раз.
Материалы любезно предоставлены http://progwards.ru/