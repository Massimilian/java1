Встроенные числовые данные не могут работать с очень большими объёмами данных. Для работы с большими числами существуют BigInteger (для целочисленных значений) и BigDecimal (для чисел с плавающей точкой).
Методы в BigDecimal – те же, что и в BigInteger. Особенности использования есть только в методе divide (деление) – необходимо включать объект класса RoundingMode, который рекомендуется настраивать на HALF_UP – это округлитель на случай, когда при делении получается бесконечная десятичная дробь (а если нам нужно получить некое количество знаков после точки, то в делителе после точки надо прописать ноли в том количестве, сколько цифр после точки мы хотим видеть в ответе). Примечательно, что способ хранения этого типа данных схож с Double – размер мантиссы (более грамотно - unscaledValue) ограничен только оперативной памятью, а размер порядка (более грамотно - scale) выражен числом, в котором более 2.000.000.000 знаков (то есть, фактически, бесконечность).
Примеры объявления BigDecimal:
BigDecimal bd = new BigDecimal("2.000");
BigDecimal other = BigDecimal.valueOf(3);
System.out.println(bd.divide(other, RoundingMode.HALF_UP)); // выведет 0.667

Также особым способом используется метод sqrt() – теперь в него следует передавать экземпляр класса MathContext, в котором мы прописываем количество знаков в экземпляре BigDecimal. Лишние знаки (ноль после точки) будут сняты.
BigDecimal bd = new BigDecimal(101);
System.out.println(bd.sqrt(new MathContext(6))); // выведет 10.0499
System.out.println(bd.sqrt(new MathContext(5))); // выведет 10.050, последний ноль снимется

Кроме того, относительно BigInteger поменялись методы …Value() – теперь остались методы doubleValue() и floatValue().
Материалы любезно предоставлены http://progwards.ru/
