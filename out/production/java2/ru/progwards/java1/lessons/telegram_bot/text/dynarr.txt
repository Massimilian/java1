Призваны убрать недостаток обыкновенного массива и динамически увеличивают свой размер при необходимости. Остальные свойства обыкновенного массива остаются в силе.
Попробуем создать свой массив по хранению неких данных. Для начала создадим «оболочку» (в данном случае код создавался по принципу наглядности, а не оперативности):

public class Array<T> { // создаём класс с Generic
    T[] array; // создаём массив классов, прописанных как Generic

    public void add(T t) {
        int size = this.array == null ? 1 : this.array.length + 1; // если мы добавляем значение в этот массив в первый раз - то делаем длину 1; если не первый - увеличиваем длину на 1.
        // T[] newArray = new T[size]; // создать массив из Generic-типов нельзя. Поэтому пока создадим массив объектов.
        Object[] newArray = new Object[size]; // создаём новый массив с обновлённым размером
        if (this.array != null) { // если массив не нулевой
            this.copydata(newArray); // осуществляем перезапись
        }
        array = (T[]) newArray; // перезаписываем основной массив в новый массив с такими же данными + 1 ячейка
        array[array.length - 1] = t; // записываем элемент в конец массива (в последний элемент)
    }

    private void copydata(Object[] objects) {
        for (int i = 0; i < this.array.length; i++) { // данные из массива array преезаписываются в новый массив 
            objects[i] = this.array[i];
        }
    }

    public T get(int num) {
        return array[num];
    }
}

Материалы любезно предоставлены http://progwards.ru/