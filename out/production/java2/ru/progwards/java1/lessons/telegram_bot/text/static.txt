Модификатор static работает с:
Статическими переменными и методами класса. В этом конктексте static – это возможность работать с классами не в объектно-ориентированном, а в процедурном ключе. Статические переменные и методы – это глобальные для всей программы переменные и методы. Во избежание ошибок следует вызывать статические методы не из экземпляра класса, а из самого класса. Статическая переменная всегда хранится в единственном экземпляре; место под неё создаётся ещё до выполнения первой строчки программы. Статические переменные могут вызвать проблемы при работе с многопоточностью, поэтому их следует избегать, а при использовании – предварять названием класса.
Статическим конструктором. Это то место при работе со статической переменной, которая формируется Java автоматически для создания статической переменной. Также его можно описать вручную внутри сигнатуры static{… имена статических переменных и присваиваемые значения …}. Если встречаются вместе определение статической переменной и статический конструктор, значением переменной будет то значение, которое появится последним.
Статическим импортом. Это импорт класса по умолчанию с тем, чтобы в дальнейшем использовать его статические методы без обращения к классу (например, в начале мы импортируем метод Math.sqrt, прописав import static java.lang.Math.sqrt, и теперь можем вызывать метод sqrt просто, не обращаясь к классу Math; можно и так – import static java.lang.Math.*, но так не очень принято).
Статическими классами. Статическими могут быть вложенные классы. Вообще существуют 5 видов классов с ключевым различием «видимость»:
Основной класс – корневой уровень, имя класса совпадает с именем файла .java.
Вложенный класс – располагается внутри какого-либо класса и обладает модификатором static.
Внутренний класс – располагается внутри какого-либо класса и не обладает модификатором static.
Локальный класс – располагается внутри любого метода, является разновидностью внутреннего класса.
Анонимный класс – разновидность локального класса, существующий сам по себе, без переменной.
Вложенный класс обладает способностью видеть все переменные (в том числе приватные) того класс, частью которого он является. Если объект создан – он также видит все свойства этого объекта, включая private. Во всём остальном – это самостоятельный класс.
Внутренний класс может существовать только при наличии созданного объекта класса, частью которого он является (своего «хозяина»). Внутренний класс видит все данные своего хозяина, но только его (другие экземпляры этого класса для него недоступны. Внутренний класс – не самостоятельный.
Во внутреннем классе запрещены статические переменные (за исключением final-констант).
Материалы любезно предоставлены http://progwards.ru/