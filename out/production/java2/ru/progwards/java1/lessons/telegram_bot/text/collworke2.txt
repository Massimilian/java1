...
•	Манипуляции с данными;
 	boolean disjoint(Collection<?> c1, Collection<?> c2) – возвращает true в том случае, когда обе коллекции не имеют общих значений (сравнение происходит через equals());
 	int frequency(Collection<?> coll, Object o) – возвращает количество вхождений объекта o в коллекцию coll (сравнение происходит через equals());
 	boolean replaceAll(List<T> list, T oldVal, T newVal) – меняет в коллекции list все значения oldVal на значения newVal;
 	void rotate(List<?> list, int distance) – ротация (сдвиг) элементов списка list на distance элементов;
 	void swap(List<?> list, int i,  int j) – рокировка элементов коллекции list под индексами i и j (внимание! указываются именно индексы).

List <Integer> list = List.of(1, 2, 3, 4, 5);
List <Integer> list1 = List.of(6, 7, 8, 9, 0);
List <Integer> list2 = List.of(1, 1);
System.out.println(Collections.disjoint(list, list1)); // совпадающих данных нет => вернёт true
System.out.println(Collections.disjoint(list, list2)); // совпадающие данные есть => вернёт false
System.out.println(Collections.frequency(list2, 1)); // вернёт 2 - колиество элементов 1 в коллекции list2
List<Integer> arr = Arrays.asList(0, 1, 2, 2);
Collections.replaceAll(arr, 0, 1); // меняет все значения 0 на значения 1; теперь arr выглядит так: [1, 1, 2, 2]
Collections.rotate(arr, 1); // сдвигает коллекцию на 1; элементы, ставшие "лишними", ставятся в начало; arr теперь выглядит так [2, 1, 1, 2]
Collections.rotate(arr, -2);// сдвигает коллекцию на -2; элементы, ставшие "лишними", ставятся в конец; arr теперь выглядит так [1, 2, 2, 1]
Collections.swap(arr, 0, 1); // меняет местами элементы под номерами 0 и 1; вместо индексов можно использовать метод indexOf()

•	Поиск, max, min;
 	int binarySearch(List <? extends Comparable<? super T>> list, T key) – быстрый поиск в отсортированной коллекции list позиции элемента key;
 	int binarySearch(List<? extends T> list, T key, Comparator<? super T> c) – быстрый поиск в отсортированной коллекции list  с использованием компаратора c;
 	int indexOfSubList(List<?> source, List<?> target) – найти в списке source первое вхождение подсписка target, а если подсписок не найден – вернёт -1;
 	int lastIndexOfSubList(List<?> source, List<?> target) – найти в списке source последнее вхождение подсписка target, а если подсписок не найден – вернёт -1;
 	T max(Collection<? extends T> coll) – находит максимальный элемент коллекции (элементы должны быть Comparable!);
 	T max(Collection<? extends T> coll, Comparator <? super T> comp) – находит максимальный элемент коллекции с заданным компаратором;
 	T min(Collection<? extends T> coll) – находит минимальный элемент коллекции (элементы должны быть Comparable!);
 	T min(Collection<? extends T> coll, Comparator <? super T> comp) – находит минимальный элемент коллекции с заданным компаратором.

List<Integer> arr = Arrays.asList(0, 1, 2, 3, 4);
System.out.println(Collections.binarySearch(arr, 3)); // вернёт 3 (индекс вхождения значения 3). Внимание! Работает только на отсортированных множествах!
System.out.println(Collections.indexOfSubList(arr, List.of(2, 3))); // вернёт два - индекс первого вхождения подсписка [2, 3]
System.out.println(Collections.max(arr)); // вернёт максимальное значение (4)
System.out.println(Collections.min(arr)); // вернёт минимальное значение (0)

Материалы любезно предоставлены http://progwards.ru/