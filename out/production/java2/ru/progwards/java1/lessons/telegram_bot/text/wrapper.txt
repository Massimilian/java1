Классы-обёртки - это классы, которые «оборачивают» примитивы (byte, short, int, long, float, double, char, boolean). Названия классов совпадают с названием примитивов, только пишутся с больших букв (исключения – Integer и Character). Возможности классов-обёрток:
Дают статические методы для работы с примитивными данными.
Дают доступ к полезным константам.
Позволяют использовать структуры данных (списки, множества, очереди и т.д.).
Для классов-обёрток не рекомендуется явный вызов конструктора.
Они работают по принципу автоупаковки (т.е. строка «Integer int = 5;» автоматически упакует 5 в Integer, неявно вызвав конструктор). Кстати, именно поэтому «автоупаковать» несовместимые типы невозможно. Например, строка «Double d = 5;» приведёт к ошибке, так как компилятор будет считать, что 5 – это тип Integer (чтобы работало, надо исправить на 5.0).
Классы-обёртки можно создавать при помощи метода valueOf («Integer I = Integer.valueOf(“10”);», и аналогично для других обёрток). Причём возможности создания объекта значительно шире – мы можем создавать Double, например, от строки (“10”), от Integer (10) и от Double (“10.0”).
Также классы-обёртки обладают способностью автораспаковываться. Например, если у нас есть два объекта типа Integer, то их можно сложить, поместив результат в int (в нормальном состоянии складывать объекты нельзя, и здесь отрабатывает именно автораспаковка); также можно перемножить объекты типа Double и Integer, поместив результат в double (сохранив дробную часть) или Integer (обрезав дробную часть).
Статические методы классов-обёрток (на примере Integer):
static int parseInt(String s) – преобразует строку s в число (примитив int);
static Integer valueOf(String s) – преобразует строку s в число (тип Integer, т.е. объект);
static String toString(int i) – преобразует число в строку. Возможно прямое использование из объекта класса Integer (Short, Byte, Float и т.д.), тогда в скобочках аргументы указывать не надо (тогда будет вызван нестатический вариант toString()). Пример:
Integer integer = 100;
String result = integer.toString();
System.out.println(result + " " + result.getClass()); // выведет значение result ('100') и его класс ('class java.lang.String')

Класс Character обладает особенными методами для работы:
static boolean isDigit(char ch) – проверка на то, что ch – это число;
static boolean isLetter(char ch) – проверка на то, что ch – это буква;
static boolean isLetterOrDigit(char ch) – проверка на то, что ch – это число или  буква;
static boolean isLowerCase(char ch) – проверка на то, что буква пишется в нижнем регистре;
static boolean isUpperCase(char ch) – проверка на то, что буква пишется в верхнем регистре;
static char toLowerCase(char ch) – перевод символа в нижний регистр;
static char toUpperCase(char ch) – перевод символа в верхний регистр; 

Полезные константы:
MIN_VALUE – минимально возможное значение обёртки и значения;
MAX_VALUE – максимально возможное значение обёртки и значения;
SIZE – размер примитива в битах;
BYTES – размер примитива в байтах.
Материалы любезно предоставлены http://progwards.ru/