В Java всего три логических оператора: ! (отрицание), && (и), || (или). Приоритетнее всего отрицание, на втором месте «и», на третьем «или». «Вне конкуренции» - выражение в скобочках. Пример:

System.out.println(true || true && false || false); // после укорочения будут значения "true или false или false", что в результате даст true
System.out.println(true || (true && false) || false); // значение не поменяется
System.out.println((true || true) && (false || false)); // после укорочения ьудут значения "true и false", что в результате приведёт к false
System.out.println(!true || false); // после укорочений будут значения "false или false", что приведёт к false.

Сложных выражений, которые используют сравнения, лучше избегать.
В случае работы оператора «и» может второе выражение может не отработать, если первое внесёт полную ясность в картину (будет равно false). Пример:

int a = 0;
int b = 1;
int c = 2;
int d = 4;
System.out.println(a++ == b && ++c == --d); // выведет false, так как первая половина выражения вернёт false
System.out.println(a); // будет равно 1 (то есть a инкрементируется после проверки)
System.out.println(b); // останется неизменным
System.out.println(c); // не изменится, так как проверки не произойдёт
System.out.println(d); // не изменится, так как проверки не произойдёт

Битовые операторы сравнения помогают проверить обе части выражения. Они выглядят так: | (или); & (и). Их действие аналогично работе стандартного оператора сравнения, но теперь гарантированно будут проверены обе стороны. Приоритет «и» выше, чем «или» (как и было в стандартных операторах сравнения). 
Не стоит забывать, что “true & false == false”, а “true | false == true”. 
Материалы любезно предоставлены http://progwards.ru/