...
NavigableMap - этот интерфейс позволяет осуществлять навигацию по словарю. Основные методы:
•	Map.Entry<K, V> ceilingEntry(K key) – находит ближайший к key элемент из набора больше или равных key (если нет – вернёт null);
•	Map.Entry<K, V> floorEntry(K key) – находит ближайший к key элемент из набора меньше или равных key (если нет – вернёт null);
•	Map.Entry<K, V> highEntry(K key) - находит ближайший к key элемент строго больше key (если нет – вернёт null);
•	Map.Entry<K, V> lowerEntry(K key) - находит ближайший к key элемент строго меньше key (если нет – вернёт null);
•	NavigableMap<K, V> descendingMap() – возвращает словарь с обратной сортировкой (с обратным компаратором);
•	Map.Entry<K, V> pollFirstEntry(K key) – возвращает первый элемент словаря и удаляет его из словаря;
•	Map.Entry<K, V> pollLastEntry(K key) – возвращает последний элемент словаря и удаляет его из словаря.
NavigableMap<Integer, String> map = new TreeMap<>(); // реализация SortedMap через TreeMap (сортирующий словарь)
map.put(1, "One");
map.put(0, "Zero");
map.put(2, "Two");
System.out.println(map.ceilingEntry(1).getValue()); // запрос Entry с ключом, ближайшим (или большим) к Key и вывод значения на экран
System.out.println(map.firstEntry().getValue()); // запрос Entry с начальным ключом (0) и вывод значения на экран
for (int i = 0; i < 2; i++) {
    System.out.println(map.pollFirstEntry()); //вывод первых двух значений Entry по очереди
}

TreeMap – сортированный словарь. Помимо интерфейса Map, реализует ещё два интерфейса – SortedMap и NavigableMap. Сортировка производится при добавлении элементов по ключам. Если HashMap осуществляет поиск и сравнение через equals и hashcode, то в TreeMap поиск производится либо если ключи реализуют интерфейс Comparable, либо если компаратор указывается в конструкторе (тогда этот вариант является приоритетным). 
Конструкторы TreeMap:
•	TreeMap() – конструктор по умолчанию, предполагается, что ключ реализует Comparable;
•	TreeMap(Comparator<? super K> comparator) – конструктор с прописанным компаратором;
•	TreeMap(Map<? extends K, ? extends V> map) – конструктор со вложенным внутрь словарём, предполагается реализация Comparable в ключе;
•	TreeMap(SortedMap<K, ? extends V> m) – конструктор для создания TreeMap на основе вложенного SortedMap (другого сортированного словаря); компаратор берётся из m.
TreeMap работает по принципу красно-чёрного дерева (это – самобалансирующееся дерево). Каждое Entry внутри TreeMap обладает рядом свойств специфических свойств – помимо ключа и значения, ссылка на родительский, правый и левый Entry, но также и boolean color, по умолчанию BLACK. Таким образом, зная корень (root), можно восстановить всё дерево.
TreeMap работает в среднем в 2 раза медленнее, чем HashMap при добавлении; в 5-6 раз медленнее, чем HashMap при поиске.

Материалы любезно предоставлены http://progwards.ru/