...

TreeMap – сортированный словарь. Помимо интерфейса Map, реализует ещё два интерфейса – SortedMap и NavigableMap. Сортировка производится при добавлении элементов по ключам. Если HashMap осуществляет поиск и сравнение через equals и hashcode, то в TreeMap поиск производится либо если ключи реализуют интерфейс Comparable, либо если компаратор указывается в конструкторе (тогда этот вариант является приоритетным). 
Конструкторы TreeMap:
•	TreeMap() – конструктор по умолчанию, предполагается, что ключ реализует Comparable;
•	TreeMap(Comparator<? super K> comparator) – конструктор с прописанным компаратором;
•	TreeMap(Map<? extends K, ? extends V> map) – конструктор со вложенным внутрь словарём, предполагается реализация Comparable в ключе;
•	TreeMap(SortedMap<K, ? extends V> m) – конструктор для создания TreeMap на основе вложенного SortedMap (другого сортированного словаря); компаратор берётся из m.
TreeMap работает по принципу красно-чёрного дерева (это – самобалансирующееся дерево). Каждое Entry внутри TreeMap обладает рядом свойств специфических свойств – помимо ключа и значения, ссылка на родительский, правый и левый Entry, но также и boolean color, по умолчанию BLACK. Таким образом, зная корень (root), можно восстановить всё дерево.
TreeMap работает в среднем в 2 раза медленнее, чем HashMap при добавлении; в 5-6 раз медленнее, чем HashMap при поиске.

Интерфейс SortedMap - Это интерфейс, расширяющий возможности Map. Заявленные методы:
•	Comparator<? super K> comparator() – возвращает компаратор либо null;
•	SortedMap<K, V> subMap(K fromKey, K toKey) – возвращает часть сортированного словаря от fromKey до toKey;
•	SortedMap<K, V> headMap(K toKey) – возвращает голову словаря до toKey (исключительно), а если такого значения нет – то до ближайшего младшего значения;
•	SortedMap<K, V> tailMap(K fromKey) – возвращает хвост словаря с fromKey (включительно), а если такого значения нет – то с ближайшего старшего значения;
•	K firstKey() – возвращает первый ключ;
•	K lastKey() – возвращает последний ключ.
Примеры работы:
SortedMap<Integer, String> map = new TreeMap<>(); // реализация SortedMap через TreeMap (сортирующий словарь)
map.put(1, "One");
map.put(0, "Zero");
map.put(2, "Two");
for(var entry : map.entrySet()) { // var предоставляет возможность компилятору самому подобрать нужный тип
    System.out.println(entry.getKey() + " -> " + entry.getValue()); // данные будут выведены в отсортированном по ключу порядке
}
System.out.println();
for(var entry: map.tailMap(1).entrySet()) { // подготавливается подмассив с ключа 1
    System.out.println(entry.getKey() + " -> " + entry.getValue()); // выводятся упорядоченные данные
}
System.out.println();
for(var entry: map.headMap(1).entrySet()) { // подготавливается подмассив с начала до ключа 1 (исключительно)
    System.out.println(entry.getKey() + " -> " + entry.getValue()); // выводится упорядоченные данные 
}
...
Для продолжения наберите "5"


Материалы любезно предоставлены http://progwards.ru/