...
Разбивает кучу на множество регионов (до этого мы работали только с тремя регионами – Эдем, выжившие и Tenured). Рассчитан на большой объём данных (от 4 gb.). Принципы работы:
Куча разбивается на множество регионов одинакового размера.
Для больших объектов создаются специальные регионы humongous.
Для регионов используется та же концепция поколения – молодое, выжившее и старое, при этом регион может сменить тип поколения несколько раз.
Малая сборка также вызывает STW, работает по поколениям молодое и выжившее, но при этом всего по нескольким регионом из большого множества. Регионы выбираются так, чтобы успеть обработать их за ограниченное время.
G1 ведёт свою статистику, выискивая и очищая в первую очередь самые «замусоренные» регионы.
Полной сборки нет. Вместо неё производится цикл пометки и смешанная сборка.
Этапы работы:
1.Пометка корневых объектов (STW).
2.Пометка остальных живых объектов (Parallel).
3.Окончательная пометка живых объектов (STW).
4.Чистка регионов от мёртвых ссылок (STW).
5.Поиск и формирование списка пустых регионов (Parallel)
Фрагментация возникает ввиду деления на области, но внутри областей всё дефрагментировано, так как именно в пустые области осуществляется копирование. 
Сбой размещения (когда некуда копировать объекты) может возникнуть – тогда отрабатываем по принципу Serial (Что приводит к большой STW). Однако это возникает реже, чем в CMS.
«Тонкая настройка»:
-XX:+UseG1GC – использование G1 GC.
-XX:+MaxGCPauseMillis – установка максимальной паузы в миллисекундах (по умолчанию 200).
-XX:ParallelGCThreads – установка количества потоков для сборки мусора (по умолчанию 4).
-XX:ConcGCThreads – установка количества потоков для цикла пометки (по умолчанию 1).
-XX:G1HeapRegionSize – установка размера одного региона. Лучше не менять
Плюсы – сокращает STW, справляется с фрагментацией (хуже Parallel, но лучше CMS), работает не хуже CMS.
Материалы любезно предоставлены http://progwards.ru/