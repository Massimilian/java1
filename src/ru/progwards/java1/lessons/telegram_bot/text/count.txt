Система счисления – это способ вычислять числа, опираясь на какое-либо определённое число. Это система записи символов, которая позволяет нам обозначить некое число. Компьютер работает в бинарной системе счисления (база = 2), человек мыслит в десятеричной (база=10). Для того, чтобы получить некое число из определённой системы, необходимо представить это число в разложенном виде. 
Например, 421 в пятеричной системе выглядит так:
421 = 4*x52 + 2*x51 + 1*x50 = 4*52 + 2*51 + 1*50 = 100 + 10 + 1 = 111; // 111 в десятичной = 421 в пятеричной
111 в двоичной системе выглядит так:
111 = 1*x22 + 1*x21 + 1*x20 = 1*22 + 1*21 + 1*20 = 4 + 2 + 1 = 8; // 111 в двоичной = 8 в десятичной
Основные используемые в программировании системы – двоичная (компьютерная), десятичная (человеческая) и шестнадцатеричная (которая помогает удобно работать с двоичной системой).
Двоичная система счисления довольно громоздка, и требует большого количества используемых цифр. А одна шестнадцатеричная цифра полностью кодирует 4 двоичные цифры. 
Теперь, если взять какое-либо громоздкое двоичное число, можно легко разбить его на части и представить в виде шестнадцатеричного, например:
1001111011112 = 1001.1110.11112 = 9EF16 = 254310
1000000000112 = 1000.0000.00112 = 80316 = 205110
Особенность Java-файлов class состоит в том, что там принято первые четыре байта по шестнадцатеричной системе счисления делать 0xCAFEBABE.
Теперь попробуем создать алгоритм по переводу числа в соответствующую систему счисления. Допустим, у нас система счисления x (база = x). Тогда необходимо взять это число и начать его делить на x, всё время сохраняя остаток в конце.
Например, при x = 10 и числе 231:
231 / 10 = 23, остаток 1;
23 /10 = 2, остаток 3;
2 / 10 = 0, остаток 2;
Получившееся число = 231.
То же число, но деление на 2 (база = 2):
231 / 2 = 115, остаток 1;
115 / 2 = 57, остаток 1;
57 / 2 = 28, остаток 1;
28 / 2 = 14, остаток 0;
14 / 2 = 7, остаток 0;
7 / 2 = 3, остаток 1;
3 / 2 = 1, остаток 1;
1 / 2 = 0, остаток 1;
Получившееся число = 11100111.
Для получения отрицательного значения числа используется следующий метод: первый бит отвечает за знак в любом виде переменных (8-битовых, как byte; 16-битовых, как short; 32-битовых, как int и 64-битовых, как long), и если он равен 0 – то число положительное, а если 1 – то отрицательное. При этом, если первый бит равен 1, он меняет все остальные биты относительно аналогичного положительного значения по принципу унарного отрицания (~), т.е. меняет значение на противоположное и прибавляет к значению 1 – уже после перевода (компенсируя, тем самым 0, у которого значение стартового бита – 0).
Материалы любезно предоставлены http://progwards.ru/